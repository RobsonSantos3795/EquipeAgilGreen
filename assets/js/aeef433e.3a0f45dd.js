"use strict";(self.webpackChunktechforge=self.webpackChunktechforge||[]).push([[323],{2441:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var t=n(4848),o=n(8453);const a={},s="Casos de teste",i={id:"test-cases",title:"Casos de teste",description:"Analisaremos passo a passo do c\xf3digo que est\xe1 escrito em JavaScript, usando React e a biblioteca de testes @testing-library/react, onde verifica se os cards s\xe3o renderizados corretamente na aplica\xe7\xe3o.",source:"@site/docs/test-cases.md",sourceDirName:".",slug:"/test-cases",permalink:"/EquipeAgilGreen/docs/test-cases",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test-cases.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arquitetura do Projeto",permalink:"/EquipeAgilGreen/docs/project-arch"}},c={},d=[{value:"Importa\xe7\xf5es",id:"importa\xe7\xf5es",level:2},{value:"Interface CardProps",id:"interface-cardprops",level:2},{value:"Mock do componente Card",id:"mock-do-componente-card",level:2},{value:"Teste unit\xe1rio",id:"teste-unit\xe1rio",level:2},{value:"Importa\xe7\xf5es",id:"importa\xe7\xf5es-1",level:2},{value:"Descri\xe7\xe3o do teste",id:"descri\xe7\xe3o-do-teste",level:2},{value:"Primeiro Teste: Verificar a Renderiza\xe7\xe3o do Componente com Props Padr\xe3o",id:"primeiro-teste-verificar-a-renderiza\xe7\xe3o-do-componente-com-props-padr\xe3o",level:2},{value:"Segundo Teste: Verificar a Renderiza\xe7\xe3o com Props Adicionais",id:"segundo-teste-verificar-a-renderiza\xe7\xe3o-com-props-adicionais",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"casos-de-teste",children:"Casos de teste"}),"\n",(0,t.jsx)(r.p,{children:"Analisaremos passo a passo do c\xf3digo que est\xe1 escrito em JavaScript, usando React e a biblioteca de testes @testing-library/react, onde verifica se os cards s\xe3o renderizados corretamente na aplica\xe7\xe3o."}),"\n",(0,t.jsx)(r.h2,{id:"importa\xe7\xf5es",children:"Importa\xe7\xf5es"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport '@testing-library/jest-dom/extend-expect';\r\nimport App from '../App';\r\nimport cards from '../utils/data/cards';\r\n\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"React:"})," Importamos a biblioteca React para criar componentes\r\n",(0,t.jsx)(r.strong,{children:"Render e Screem:"})," Utilizamos para importar fun\xe7\xf5es da biblioteca de testes @testing-library/react. ",(0,t.jsx)(r.strong,{children:"Render"})," \xe9 usado para renderizar componentes React em um ambiente de teste e o ",(0,t.jsx)(r.strong,{children:"Screen"})," \xe9 usado para consultar elementos renderizados."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"App:"})," Serve para importar o componente principal da aplica\xe7\xe3o."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Cards:"})," Importa a lista de cards a partir de um arquivo de dados."]}),"\n",(0,t.jsx)(r.h2,{id:"interface-cardprops",children:"Interface CardProps"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"interface CardProps {\r\n  name: string;\r\n  image: string;\r\n  link: string;\r\n  category: string;\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Define uma interface TypeScript para as propriedades de um cart\xe3o. Isso \xe9 \xfatil para garantir que os cart\xf5es recebam as propriedades corretas com os tipos de dados esperados."}),"\n",(0,t.jsx)(r.h2,{id:"mock-do-componente-card",children:"Mock do componente Card"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"\r\njest.mock('../components/Card', () => {\r\n  return {\r\n    Card: ({ name, image, link, category }: CardProps) => (\r\n      <div data-testid=\"card\">\r\n        <h2>{name}</h2>\r\n        <img src={image} alt={name} />\r\n        <a href={link}>Link</a>\r\n        <p>{category}</p>\r\n      </div>\r\n    )\r\n  };\r\n});\r\n\r\n\n"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Jest.mock: Substitui o componente real ",(0,t.jsx)(r.strong,{children:"Card"})," por uma vers\xe3o mock para testes. Isso \xe9 feito para controlar como o componente se comporta e para n\xe3o depender de sua implementa\xe7\xe3o real durante os testes."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Card.mock: Define um componente mock ",(0,t.jsx)(r.strong,{children:"card"})," que aceita ",(0,t.jsx)(r.strong,{children:"name"}),", ",(0,t.jsx)(r.strong,{children:"image"}),", ",(0,t.jsx)(r.strong,{children:"link"})," e ",(0,t.jsx)(r.strong,{children:"category"})," como props e renderizam o ",(0,t.jsx)(r.strong,{children:"div"})," com esses dados. Cada ",(0,t.jsx)(r.strong,{children:"div"})," tem um atributo ",(0,t.jsx)(r.strong,{children:"data-testid"})," para facilitar a consulta durantes os testes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"teste-unit\xe1rio",children:"Teste unit\xe1rio"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"\r\ntest('renders all cards', () => {\r\n  render(<App />);\r\n  \r\n  // Verifique se o n\xfamero de cart\xf5es renderizados \xe9 igual ao n\xfamero de cart\xf5es na lista\r\n  const cardElements = screen.getAllByTestId('card');\r\n  expect(cardElements).toHaveLength(cards.length);\r\n\r\n  // Verifique se cada cart\xe3o tem os dados corretos\r\n  cards.forEach(card => {\r\n    expect(screen.getByText(card.title)).toBeInTheDocument();\r\n    expect(screen.getByAltText(card.title)).toBeInTheDocument();\r\n    // Use getAllByText para m\xfaltiplos elementos com o mesmo texto\r\n    expect(screen.getAllByText(card.category).length).toBeGreaterThan(0);\r\n  });\r\n});\r\n\n"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"\"render(App)\": Renderiza o componente 'App' para teste."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"screen.getAllByTestld('card'): Obt\xe9m todos os elementos que tem o atributo 'data-testid = \"card\"'."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"expect(cardElements).toHaveLength(cards.length): Verifica se o n\xfamero de elementos renderizados \xe9 igual ao n\xfamero de cart\xf5es la lista 'cards';"}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"cards.forEach: Itera sobre cada card na lista e verifica os seguintes pontos:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Se o texto do t\xedtulo do cart\xe3o est\xe1 presente no documento."}),"\n",(0,t.jsx)(r.li,{children:"Se a imagem do cart\xe3o est\xe1 presente no documento (verificada pelo atributo alt)."}),"\n",(0,t.jsx)(r.li,{children:"Se a categoria do cart\xe3o est\xe1 presente no documento, permitindo m\xfaltiplas ocorr\xeancias do mesmo texto."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"OBS:"})," Esse c\xf3digo assegura que todos os cart\xf5es s\xe3o renderizados corretamente e que cada cart\xe3o cont\xe9m os dados esperados (t\xedtulo, imagem, e categoria)."]}),"\n",(0,t.jsx)(r.p,{children:"Analisaremos esse c\xf3digo de teste que verifica o comportamento do componente Card em uma aplica\xe7\xe3o React, usando a biblioteca de testes @testing-library/react e as extens\xf5es de asser\xe7\xf5es do Jest."}),"\n",(0,t.jsx)(r.h2,{id:"importa\xe7\xf5es-1",children:"Importa\xe7\xf5es"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport '@testing-library/jest-dom/extend-expect';\r\nimport { Card } from '../components/Card'; // Assumindo que o componente Card est\xe1 no mesmo diret\xf3rio\r\n\n"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"React: Importa a biblioteca React, necess\xe1ria para utilizar JSX."}),"\n",(0,t.jsx)(r.li,{children:"render e screen: Importa fun\xe7\xf5es da biblioteca de testes @testing-library/react. render \xe9 usado para renderizar o componente em um ambiente de teste, e screen \xe9 usado para consultar elementos renderizados."}),"\n",(0,t.jsx)(r.li,{children:"'@testing-library/jest-dom/extend-expect': Importa extens\xf5es para asser\xe7\xf5es do Jest, como toBeInTheDocument."}),"\n",(0,t.jsx)(r.li,{children:"Card: Importa o componente Card que ser\xe1 testado."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"descri\xe7\xe3o-do-teste",children:"Descri\xe7\xe3o do teste"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"\r\ndescribe('Card Component', () => {\r\n  const defaultProps = {\r\n    name: 'Test Name',\r\n    category: 'Test Category',\r\n    link: 'https://example.com',\r\n    image: 'https://via.placeholder.com/150',\r\n  };\r\n\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Describe:"})," Agrupa os testes relacionados ao componente Card.\r\n",(0,t.jsx)(r.strong,{children:"DefaultProps:"})," Define um conjunto de propriedades padr\xe3o que ser\xe3o passadas para o componente Card durante os testes."]}),"\n",(0,t.jsx)(r.h2,{id:"primeiro-teste-verificar-a-renderiza\xe7\xe3o-do-componente-com-props-padr\xe3o",children:"Primeiro Teste: Verificar a Renderiza\xe7\xe3o do Componente com Props Padr\xe3o"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"\r\n  test('renders the Card component with the given props', () => {\r\n    render(<Card {...defaultProps} />);\r\n\r\n    // Verifica se a imagem est\xe1 renderizada corretamente\r\n    const imgElement = screen.getByAltText('Logo');\r\n    expect(imgElement).toHaveAttribute('src', defaultProps.image);\r\n\r\n    // Verifica se o nome est\xe1 renderizado corretamente\r\n    const nameElement = screen.getByText(defaultProps.name);\r\n    expect(nameElement).toBeInTheDocument();\r\n\r\n    // Verifica se a categoria est\xe1 renderizada corretamente\r\n    const categoryElement = screen.getByText(defaultProps.category);\r\n    expect(categoryElement).toBeInTheDocument();\r\n\r\n    // Verifica se o link est\xe1 renderizado corretamente\r\n    const linkElement = screen.getByText('Saiba Mais');\r\n    expect(linkElement).toBeInTheDocument();\r\n    expect(linkElement).toHaveAttribute('href', defaultProps.link);\r\n    expect(linkElement).toHaveAttribute('target', '_blank');\r\n  });\r\n\r\n\n"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"test: Define um teste que verifica se o componente Card \xe9 renderizado corretamente com as propriedades fornecidas."}),"\n",(0,t.jsxs)(r.li,{children:["render(Card ","...defaultProps","): Renderiza o componente Card com as propriedades padr\xe3o."]}),"\n",(0,t.jsx)(r.li,{children:"screen.getByAltText('Logo'): Obt\xe9m o elemento de imagem pelo texto alternativo 'Logo'."}),"\n",(0,t.jsx)(r.li,{children:"expect(imgElement).toHaveAttribute('src', defaultProps.image): Verifica se a imagem tem o atributo src igual ao valor esperado."}),"\n",(0,t.jsx)(r.li,{children:"screen.getByText(defaultProps.name): Obt\xe9m o elemento que cont\xe9m o nome fornecido."}),"\n",(0,t.jsx)(r.li,{children:"expect(nameElement).toBeInTheDocument(): Verifica se o nome est\xe1 presente no documento."}),"\n",(0,t.jsx)(r.li,{children:"screen.getByText(defaultProps.category): Obt\xe9m o elemento que cont\xe9m a categoria fornecida."}),"\n",(0,t.jsx)(r.li,{children:"expect(categoryElement).toBeInTheDocument(): Verifica se a categoria est\xe1 presente no documento."}),"\n",(0,t.jsx)(r.li,{children:"screen.getByText('Saiba Mais'): Obt\xe9m o elemento de link pelo texto 'Saiba Mais'.\r\nexpect(linkElement).toHaveAttribute('href', defaultProps.link): Verifica se o link tem o atributo href correto."}),"\n",(0,t.jsx)(r.li,{children:"expect(linkElement).toHaveAttribute('target', '_blank'): Verifica se o link abre em uma nova aba."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"segundo-teste-verificar-a-renderiza\xe7\xe3o-com-props-adicionais",children:"Segundo Teste: Verificar a Renderiza\xe7\xe3o com Props Adicionais"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"  test('renders the Card component with additional props', () => {\r\n    const additionalProps = {\r\n      additionalInfo: 'Additional Info',\r\n    };\r\n    const combinedProps = { ...defaultProps, ...additionalProps };\r\n\r\n    render(<Card {...combinedProps} />);\r\n\r\n    // Verifica se a informa\xe7\xe3o adicional est\xe1 renderizada corretamente\r\n    const additionalInfoElement = screen.getByText(additionalProps.additionalInfo);\r\n    expect(additionalInfoElement).toBeInTheDocument();\r\n  });\r\n});\r\n\n"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"additionalProps: Define propriedades adicionais que ser\xe3o passadas para o componente."}),"\n",(0,t.jsx)(r.li,{children:"combinedProps: Combina as propriedades padr\xe3o com as propriedades adicionais."}),"\n",(0,t.jsx)(r.li,{children:"render(): Renderiza o componente Card com as propriedades combinadas."}),"\n",(0,t.jsx)(r.li,{children:"screen.getByText(additionalProps.additionalInfo): Obt\xe9m o elemento que cont\xe9m a informa\xe7\xe3o adicional."}),"\n",(0,t.jsx)(r.li,{children:"expect(additionalInfoElement).toBeInTheDocument(): Verifica se a informa\xe7\xe3o adicional est\xe1 presente no documento."}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"OBS:"})," Este c\xf3digo realiza testes unit\xe1rios no componente Card, verificando se ele \xe9 renderizado corretamente com diferentes conjuntos de propriedades. Ele assegura que todos os elementos importantes, como imagem, nome, categoria e link, est\xe3o presentes e t\xeam os atributos corretos. Tamb\xe9m testa a capacidade do componente de lidar com propriedades adicionais."]})]})}function m(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(6540);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);